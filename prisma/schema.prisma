// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemSlot {
  helmet
  chest
  glove
  feet
  weapon
  shield
  cape
  ring
  neck
}

enum ItemRarity {
  common
  uncommon
  rare
  epic
  legendary
}

enum CharacterTrait {
  warrior
  scholar
  scoundrel
}

model User {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  lastLogin   DateTime?
  bannedUntil DateTime?
  isTester    Boolean   @default(false)
  settings    Json?
  region      String?

  authProviders AuthProvider[]
  characters    Character[]
}

model AuthProvider {
  id         String   @id @default(uuid())
  provider   String // 'guest' | 'facebook' | 'google' | 'apple'
  providerId String // FB user ID or guest ID
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())

  @@unique([provider, providerId])
}

model Character {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  name         String  @unique
  title        String
  level        Int     @default(1)
  experience   Int     @default(0)
  lootScore    Int     @default(0)
  hasCharacter Boolean @default(false)

  trait     CharacterTrait
  createdAt DateTime       @default(now())

  appearance   CharacterAppearance?
  resources    CharacterResources?
  stats        CharacterStats?
  items        CharacterItem[]
  achievements CharacterAchievement[]
  dungeonRuns  DungeonRun[]
  dungeonProgress PlayerDungeonProgress[]

  @@index([userId])
}

model CharacterAppearance {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @unique

  gender    String
  skinTone  String
  hair      String
  hairColor String
  eyes      String
  mouth     String
  beard     String?
  markings  String?

  @@index([characterId])
}

model ItemTemplate {
  id        String     @id @default(uuid())
  code      String     @unique // e.g., "wooden_sword"
  name      String
  rarity    ItemRarity
  slot      ItemSlot
  baseStats Json
  iconUrl   String

  CharacterItem CharacterItem[]
}

model CharacterItem {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String

  template   ItemTemplate @relation(fields: [templateId], references: [id])
  templateId String

  slot          ItemSlot
  equipped      Boolean  @default(false)
  durability    Int      @default(100)
  socketedRunes Json?
  bonuses       Json? // dynamic modifiers

  createdAt DateTime @default(now())

  @@index([characterId])
}

model CharacterResources {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @unique

  gold         Int @default(0)
  scrap        Int @default(0)
  soulstones   Int @default(0)
  pvpTokens    Int @default(0)
  mirrorShards Int @default(0)

  runes Int @default(0)
  // Base capacity for runes (default 4) and any bonuses (premium, skills, etc.)
  runeCapacityBase  Int      @default(4)
  runeCapacityBonus Int      @default(0)
  // Base regen interval in seconds (default 1800 = 30 min), multiplicative modifier in milli-units (1000 = 1.0x),
  // and additive modifier in seconds (can be negative)
  runeRegenBaseSeconds Int   @default(1800)
  runeRegenMultiplier  Int   @default(1000)
  runeRegenAddSeconds  Int   @default(0)

  runesUpdatedAt      DateTime @default(now())
  soulstonesUpdatedAt DateTime @default(now())
  pvpUpdatedAt        DateTime @default(now())

  @@index([characterId])
}

model CharacterStats {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @unique

  damageDealt     Int @default(0)
  enemiesKilled   Int @default(0)
  playersFought   Int @default(0)
  resourcesGained Int @default(0)
  questsCompleted Int @default(0)
  dungeonRuns     Int @default(0)

  @@index([characterId])
}

model CharacterAchievement {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String

  achievementId String // FK to Achievement table
  progress      Int       @default(0)
  unlockedAt    DateTime?

  @@index([characterId])
}

model Achievement {
  id          String @id @default(uuid())
  code        String @unique // 'KILL_100_ENEMIES'
  title       String
  description String
  goal        Int
}

// Combat System Models

model Enemy {
  id   String @id @default(uuid())
  name String
  code String @unique // e.g., "goblin_warrior"
  hp   Int    // base health points
  atk  Int    // base attack damage
}

model Dungeon {
  id         String @id @default(uuid())
  name       String
  wavesCount Int
  waveComp   Json   // [{"enemies":[{"id":"abc123","count":1}]},{"enemies":[{"id":"123bac","count":2},{"id":"1231231","count":1}]}]

  // Relations
  scaling   DungeonScaling?
  rewards   DungeonReward?
  runs      DungeonRun[]
  progress  PlayerDungeonProgress[]
}

model DungeonScaling {
  id         String  @id @default(uuid())
  dungeon    Dungeon @relation(fields: [dungeonId], references: [id])
  dungeonId  String  @unique

  hpGrowth   Float // e.g., 0.10 = +10% per level
  atkGrowth  Float // e.g., 0.08 = +8% per level
  defGrowth  Float // e.g., 0.05 = +5% per level
  lootGrowth Float? // e.g., 0.20 = +20% per level (optional)
}

model DungeonReward {
  id         String  @id @default(uuid())
  dungeon    Dungeon @relation(fields: [dungeonId], references: [id])
  dungeonId  String  @unique

  baseGoldMin Int
  baseGoldMax Int
  baseXpMin   Int
  baseXpMax   Int
  dropsJson   Json? // simple drops for item ids and weights
}

model DungeonRun {
  id         String   @id @default(uuid())
  character  Character @relation(fields: [characterId], references: [id])
  characterId String
  dungeon    Dungeon  @relation(fields: [dungeonId], references: [id])
  dungeonId  String
  level      Int

  outcome      String // "victory" | "defeat"
  turns        Int
  rewardsJson  Json   // what was awarded
  logCompactJson Json? // small array of events for playback/review

  createdAt DateTime @default(now())

  @@index([characterId])
  @@index([dungeonId])
}

model PlayerDungeonProgress {
  id         String    @id @default(uuid())
  character  Character @relation(fields: [characterId], references: [id])
  characterId String
  dungeon    Dungeon   @relation(fields: [dungeonId], references: [id])
  dungeonId  String

  highestLevelCleared Int @default(0)

  @@unique([characterId, dungeonId])
  @@index([characterId])
}
